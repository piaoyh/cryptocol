mod number;

use number::*;

type T = u64;
const N: usize = 16;

fn main()
{
    type BI = BigUInt::<T, N>;
    type AI = BigUInt::<usize, N>;
    let bi = BI::from_array(&[1;N]);
    let bb = BI::from_string_with_radix("0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__", 16).unwrap();
    let b = BI::from_string("1234567891234567879123456789111111111222222222333333333444444444555555555666666666777777777888888888999999999000000000").unwrap();
    println!("bi = {:?}", bi);
    println!("bi = {}", bi.to_string_with_radix(16));
    println!("bb = {:?}", bb);
    println!("bb = {}", bb.to_string_with_radix(16));
    println!("b = {}", b);
    println!("b * bb = {}", b * bb);
    println!("bb / b = {}", bb / b);
    println!("bb % b = {}", bb % b);
    println!("b + 1 = {}", b.add_uint(1));
    println!("b - 1 = {}", b.sub_uint(1));
    let a = AI::from_string("123654789147258369").unwrap();
    println!("a = {}", a);
}
