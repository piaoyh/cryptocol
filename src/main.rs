mod cryptocol;

use cryptocol::big_uint::*;
use cryptocol::primitive::*;

type T = u64;
const N: usize = 16;

fn main()
{
    type BI = BigUInt::<T, N>;
    let mut a = BI::from_string("1000").unwrap();
    let b = BI::from_string("3").unwrap();
    let bi = BI::from_array(&[1;N]);
    let bb = BI::from_string_with_radix("0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__0000_0000_0000_0001__", 16).unwrap();
    println!("a  = {}", a.to_string());
    a.times(123);
    println!("a x 123 = {}", a.to_string());
//    let c = bi * bb;
//    println!("{} / {} = {}", a.to_string(), b.to_string(), c.to_string());
//    println!("c = {:?}", c);
//    println!("bi = {:?}", bi);
//    println!("bb = {:?}", bb);
//    println!("bb = {}", bi.to_string());
}
